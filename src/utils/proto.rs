// This file is @generated by prost-build.
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SophonManifest {
    #[prost(message, repeated, tag = "1")]
    pub files: ::prost::alloc::vec::Vec<ManifestFile>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ManifestFile {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub chunks: ::prost::alloc::vec::Vec<FileChunk>,
    #[prost(int32, tag = "3")]
    pub r#type: i32,
    #[prost(uint64, tag = "4")]
    pub size: u64,
    #[prost(string, tag = "5")]
    pub md5: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FileChunk {
    #[prost(string, tag = "1")]
    pub chunk_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub chunk_decompressed_md5: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub chunk_on_file_offset: u64,
    #[prost(uint64, tag = "4")]
    pub chunk_size: u64,
    #[prost(uint64, tag = "5")]
    pub chunk_decompressed_size: u64,
    #[prost(uint64, tag = "6")]
    pub something: u64,
    #[prost(string, tag = "7")]
    pub chunk_md5: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SophonDiff {
    #[prost(message, repeated, tag = "1")]
    pub files: ::prost::alloc::vec::Vec<PatchFile>,
    #[prost(map = "string, message", tag = "2")]
    pub delete_files: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        DeleteFiles,
    >,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PatchFile {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub size: u64,
    /// md5 file hash AFTER patching
    #[prost(string, tag = "3")]
    pub md5: ::prost::alloc::string::String,
    #[prost(map = "string, message", tag = "4")]
    pub chunks: ::std::collections::HashMap<::prost::alloc::string::String, PatchChunk>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PatchChunk {
    #[prost(string, tag = "1")]
    pub patch_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub version: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub build_id: ::prost::alloc::string::String,
    #[prost(uint64, tag = "4")]
    pub patch_size: u64,
    #[prost(string, tag = "5")]
    pub patch_md5: ::prost::alloc::string::String,
    #[prost(uint64, tag = "6")]
    pub patch_offset: u64,
    #[prost(uint64, tag = "7")]
    pub patch_length: u64,
    #[prost(string, tag = "8")]
    pub original_filename: ::prost::alloc::string::String,
    #[prost(uint64, tag = "9")]
    pub original_file_length: u64,
    /// md5 file hash BEFORE patching
    #[prost(string, tag = "10")]
    pub original_md5: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteFiles {
    #[prost(message, repeated, tag = "1")]
    pub files: ::prost::alloc::vec::Vec<UnusuedFile>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UnusuedFile {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub size: u64,
    #[prost(string, tag = "3")]
    pub md5: ::prost::alloc::string::String,
}
